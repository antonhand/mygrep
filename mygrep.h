#ifndef MYGREP_H_INCLUDED
#define MYGREP_H_INCLUDED
/*!
 * @mainpage mygrep
 * @author Антон Ханджян, 205 группа ВМК МГУ
 */

/*!
*\file
*\brief Заголовочный файл пользовательськой части программы
*
* Данный файл содержит в себе определение класса-обработчика регулярных выражений
*/

#include "syntax.h"
#include <vector>

using namespace std;

/*! \brief Обработчик регулярных выражений
 *
 * Проверяет строки на соответствие регулярному выражению либо ищет первое вхождение подстроки, удовлетворяющей регулярному выражению
 */
class Mygrep
{
    typedef vector<Syn_lexem>::iterator intern_iterator;///< Итератор, указывающий на текущее положение во внутреннем представлении
    vector<Syn_lexem> internal;                         ///< Внутреннее представление регулярного выражения
    intern_iterator internal_it;                        ///< Итератор текущего положения в регулярном выражении

    string inp;                                         ///< Входная строка
    size_t inp_pos = 0;                                 ///< Позиция во входной строке
    vector<Syn_lexem> v_next;                           ///< Вектор синтаксических лексем, следующих за текущей проверяемой лексемой

	bool issearch = false;                              ///< Признак режима работы: сравнение или поиск подстроки

    /// @name Функции-обработчики операций
    /// @{
    /*! \brief Итерация
     *
     * Выполняет итерирацию выражения. В режими поиска подстроки выбирает вариант наибольшего количества итераций
     * \param[in] lazy Признок ленивости иттерации
     */
    void iter(bool lazy = false);

    /*! \brief Итерация от n до m раз
     *
     *  Выполняет проверку наличия выражения n раз и выполняет итерацию дополнительно до, возможно, m-того раза
     * \return true, если выражение повторяется хотя бы n раз, false — иначе
     */
    bool iter_n_m(int n, int m);

    /*! \brief Терминал
     *
     *  Выполняет проверку наличия необходимой терминальной последовательности на позиции входной строки, анализируемой в данный момент
     * \return true, если терминальная последовательность обнаружена, false — иначе
     */
    bool terminal();

    /*! \brief Перечисление
     *
     *  Выполняет проверку соответствия входной строки одному из двух выражений-операндов
     * \return true, если соответствует одному из выражений, false, если ни одному из выражений не соответствует
     */
    bool alternate();
    /// @}

     /*! \brief Функция выбора операции
     *
     *  Вызывает функцию, соответствующую текущей лексеме
     * \return Возвращает значение вызванной ей функции либо true, если вызывалась неограниченная итерация
     */
    bool selector();

    /*! \brief Конструктор от вектора лексем
     *
     * Сделан явным, поскольку неясен смысл выражения вида Mygrep c = "a*";
     */
    Mygrep(vector<Syn_lexem> &v);

public:
    /*! \brief Конструктор от строки с регулярным выражением.
     *
     * Сделан явным, поскольку неясен смысл выражения вида Mygrep c = "a*";
     */
    explicit Mygrep(const string &reg);

    /*! \brief Функция сравнения с регулярным выражением
     *
     *  Проверяет, соответствует ли строка регулярному выражению
     *
     * \param[in] s Строка для проверки
     * \param[in] forsearch Признак того, что проверка выполняется для функции search
     * \return true, если строка соответствует регулярному выражению, false — иначе
     */
    bool check(const string &s, bool forsearch = false);

    /*! \brief Функция проверки подвыражения
     *
     * \param[in] v Вектор лексем для проверки
     * \return true, если строка соответствует регулярному выражению, false — иначе
     */
    bool check(vector<Syn_lexem> &v);

	/*! \brief Функция поиска подстроки, соответствующей регулярному выражению
	 *
     *  Ищет первое вхождение подстроки, соответствующей регулярному выражению
     *
     * \param[in] s Строка для поиска
     * \return Возвращает подстроку, соответствующую регулярному выражению, либо " " (пробел), если подстрока не найдена
     */
	string search(const string &s);

    /*! \brief Проверка следующего
     *
     * \return true, если строка соответствует следующим лексемам, false — иначе
     *
     */
    bool check_next();
};


#endif // MYGREP_H_INCLUDED
